//
//  StyleKit.swift
//  Ptt
//
//  Created by denkeni on Nov 23, 2020.
//  Copyright © 2020 Ptt. All rights reserved.
//
//  Generated by PaintCode Plugin for Sketch
//  http://www.paintcodeapp.com/sketch
//

import UIKit



class StyleKit: NSObject {
    
    
    //MARK: - Canvas Drawings
    
    /// Page 1
    
    class func drawBoardCategory(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 12, height: 10), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 12, height: 10), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 12, y: resizedFrame.height / 10)
        
        /// Component 8 – 18
        do {
            context.saveGState()
            
            /// Group 3
            do {
                context.saveGState()
                
                /// Fill 1
                let fill1 = UIBezierPath()
                fill1.move(to: CGPoint.zero)
                fill1.addLine(to: CGPoint(x: 11, y: 0))
                fill1.addLine(to: CGPoint(x: 11, y: 3))
                fill1.addLine(to: CGPoint(x: 0, y: 3))
                fill1.addLine(to: CGPoint.zero)
                fill1.close()
                context.saveGState()
                context.translateBy(x: 0.5, y: 0.5)
                context.restoreGState()
                
                /// Stroke 2
                let stroke2 = UIBezierPath()
                stroke2.move(to: CGPoint.zero)
                stroke2.addLine(to: CGPoint(x: 11, y: 0))
                stroke2.addLine(to: CGPoint(x: 11, y: 3))
                stroke2.addLine(to: CGPoint(x: 0, y: 3))
                stroke2.addLine(to: CGPoint.zero)
                stroke2.close()
                context.saveGState()
                context.translateBy(x: 0.5, y: 0.5)
                stroke2.lineJoinStyle = .round
                stroke2.lineCapStyle = .round
                stroke2.lineWidth = 1
                UIColor(hue: 0.667, saturation: 0.081, brightness: 0.58, alpha: 1).setStroke()
                stroke2.stroke()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// Group 6
            do {
                context.saveGState()
                context.translateBy(x: 0, y: 6)
                
                /// Fill 4
                let fill4 = UIBezierPath()
                fill4.move(to: CGPoint.zero)
                fill4.addLine(to: CGPoint(x: 11, y: 0))
                fill4.addLine(to: CGPoint(x: 11, y: 3))
                fill4.addLine(to: CGPoint(x: 0, y: 3))
                fill4.addLine(to: CGPoint.zero)
                fill4.close()
                context.saveGState()
                context.translateBy(x: 0.5, y: 0.5)
                context.restoreGState()
                
                /// Stroke 5
                let stroke5 = UIBezierPath()
                stroke5.move(to: CGPoint.zero)
                stroke5.addLine(to: CGPoint(x: 11, y: 0))
                stroke5.addLine(to: CGPoint(x: 11, y: 3))
                stroke5.addLine(to: CGPoint(x: 0, y: 3))
                stroke5.addLine(to: CGPoint.zero)
                stroke5.close()
                context.saveGState()
                context.translateBy(x: 0.5, y: 0.5)
                stroke5.lineJoinStyle = .round
                stroke5.lineCapStyle = .round
                stroke5.lineWidth = 1
                UIColor(hue: 0.667, saturation: 0.081, brightness: 0.58, alpha: 1).setStroke()
                stroke5.stroke()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawRefresh(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 24), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 24), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 24)
        
        /// Fill 1
        let fill1 = UIBezierPath()
        fill1.move(to: CGPoint(x: 10, y: 4.8))
        fill1.addLine(to: CGPoint(x: 10, y: 0))
        fill1.addLine(to: CGPoint(x: 16.25, y: 6))
        fill1.addLine(to: CGPoint(x: 10, y: 12))
        fill1.addLine(to: CGPoint(x: 10, y: 7.2))
        fill1.addCurve(to: CGPoint(x: 2.5, y: 14.4), controlPoint1: CGPoint(x: 5.86, y: 7.2), controlPoint2: CGPoint(x: 2.5, y: 10.43))
        fill1.addCurve(to: CGPoint(x: 10, y: 21.6), controlPoint1: CGPoint(x: 2.5, y: 18.37), controlPoint2: CGPoint(x: 5.86, y: 21.6))
        fill1.addCurve(to: CGPoint(x: 17.5, y: 14.4), controlPoint1: CGPoint(x: 14.14, y: 21.6), controlPoint2: CGPoint(x: 17.5, y: 18.37))
        fill1.addLine(to: CGPoint(x: 20, y: 14.4))
        fill1.addCurve(to: CGPoint(x: 10, y: 24), controlPoint1: CGPoint(x: 20, y: 19.7), controlPoint2: CGPoint(x: 15.52, y: 24))
        fill1.addCurve(to: CGPoint(x: 0, y: 14.4), controlPoint1: CGPoint(x: 4.47, y: 24), controlPoint2: CGPoint(x: 0, y: 19.7))
        fill1.addCurve(to: CGPoint(x: 10, y: 4.8), controlPoint1: CGPoint(x: 0, y: 9.1), controlPoint2: CGPoint(x: 4.47, y: 4.8))
        fill1.close()
        context.saveGState()
        fill1.usesEvenOddFillRule = true
        UIColor(hue: 0.667, saturation: 0.081, brightness: 0.58, alpha: 1).setFill()
        fill1.fill()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawSearch(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 23, height: 23), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 23, height: 23), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 23, y: resizedFrame.height / 23)
        
        /// Component 15 – 17
        let component1517 = UIBezierPath()
        component1517.move(to: CGPoint(x: 12.7, y: 12.7))
        component1517.addLine(to: CGPoint(x: 19.41, y: 19.41))
        component1517.addLine(to: CGPoint(x: 12.7, y: 12.7))
        component1517.close()
        component1517.move(to: CGPoint(x: 2.08, y: 12.14))
        component1517.addCurve(to: CGPoint(x: 2.08, y: 2.08), controlPoint1: CGPoint(x: -0.69, y: 9.37), controlPoint2: CGPoint(x: -0.69, y: 4.86))
        component1517.addCurve(to: CGPoint(x: 12.14, y: 2.08), controlPoint1: CGPoint(x: 4.86, y: -0.69), controlPoint2: CGPoint(x: 9.37, y: -0.69))
        component1517.addCurve(to: CGPoint(x: 12.14, y: 12.14), controlPoint1: CGPoint(x: 14.92, y: 4.86), controlPoint2: CGPoint(x: 14.92, y: 9.37))
        component1517.addCurve(to: CGPoint(x: 2.08, y: 12.14), controlPoint1: CGPoint(x: 9.37, y: 14.92), controlPoint2: CGPoint(x: 4.86, y: 14.92))
        component1517.close()
        context.saveGState()
        context.translateBy(x: 2, y: 2)
        component1517.lineJoinStyle = .round
        component1517.lineCapStyle = .round
        component1517.lineWidth = 2.5
        UIColor(hue: 0.667, saturation: 0.081, brightness: 0.58, alpha: 1).setStroke()
        component1517.stroke()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawCompose(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 21, height: 21), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 21, height: 21), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 21, y: resizedFrame.height / 21)
        
        /// edit-24px
        let edit24px = UIBezierPath()
        edit24px.move(to: CGPoint(x: 0, y: 16.63))
        edit24px.addLine(to: CGPoint(x: 0, y: 21))
        edit24px.addLine(to: CGPoint(x: 4.37, y: 21))
        edit24px.addLine(to: CGPoint(x: 17.28, y: 8.1))
        edit24px.addLine(to: CGPoint(x: 12.9, y: 3.72))
        edit24px.addLine(to: CGPoint(x: 0, y: 16.63))
        edit24px.close()
        edit24px.move(to: CGPoint(x: 20.66, y: 4.72))
        edit24px.addCurve(to: CGPoint(x: 20.66, y: 3.07), controlPoint1: CGPoint(x: 21.12, y: 4.26), controlPoint2: CGPoint(x: 21.12, y: 3.53))
        edit24px.addLine(to: CGPoint(x: 17.93, y: 0.34))
        edit24px.addCurve(to: CGPoint(x: 16.29, y: 0.34), controlPoint1: CGPoint(x: 17.48, y: -0.11), controlPoint2: CGPoint(x: 16.74, y: -0.11))
        edit24px.addLine(to: CGPoint(x: 14.15, y: 2.48))
        edit24px.addLine(to: CGPoint(x: 18.53, y: 6.85))
        edit24px.addLine(to: CGPoint(x: 20.66, y: 4.72))
        edit24px.addLine(to: CGPoint(x: 20.66, y: 4.72))
        edit24px.close()
        context.saveGState()
        edit24px.usesEvenOddFillRule = true
        UIColor(hue: 0.667, saturation: 0.081, brightness: 0.58, alpha: 1).setFill()
        edit24px.fill()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawMoreH(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 27, height: 5), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 27, height: 5), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 27, y: resizedFrame.height / 5)
        
        /// Component 12 – 13
        do {
            context.saveGState()
            
            /// Fill 1
            let fill1 = UIBezierPath()
            fill1.move(to: CGPoint(x: 2.5, y: 5))
            fill1.addCurve(to: CGPoint(x: 0, y: 2.5), controlPoint1: CGPoint(x: 1.12, y: 5), controlPoint2: CGPoint(x: 0, y: 3.88))
            fill1.addCurve(to: CGPoint(x: 2.5, y: 0), controlPoint1: CGPoint(x: 0, y: 1.12), controlPoint2: CGPoint(x: 1.12, y: 0))
            fill1.addCurve(to: CGPoint(x: 5, y: 2.5), controlPoint1: CGPoint(x: 3.88, y: 0), controlPoint2: CGPoint(x: 5, y: 1.12))
            fill1.addCurve(to: CGPoint(x: 2.5, y: 5), controlPoint1: CGPoint(x: 5, y: 3.88), controlPoint2: CGPoint(x: 3.88, y: 5))
            fill1.close()
            context.saveGState()
            context.translateBy(x: 22, y: 0)
            fill1.usesEvenOddFillRule = true
            UIColor(hue: 0.667, saturation: 0.081, brightness: 0.58, alpha: 1).setFill()
            fill1.fill()
            context.restoreGState()
            
            /// Fill 2
            let fill2 = UIBezierPath()
            fill2.move(to: CGPoint(x: 2.5, y: 5))
            fill2.addCurve(to: CGPoint(x: 1.54, y: 4.81), controlPoint1: CGPoint(x: 2.17, y: 5), controlPoint2: CGPoint(x: 1.85, y: 4.94))
            fill2.addCurve(to: CGPoint(x: 0.73, y: 4.27), controlPoint1: CGPoint(x: 1.24, y: 4.68), controlPoint2: CGPoint(x: 0.97, y: 4.5))
            fill2.addCurve(to: CGPoint(x: 0.19, y: 3.46), controlPoint1: CGPoint(x: 0.5, y: 4.03), controlPoint2: CGPoint(x: 0.32, y: 3.76))
            fill2.addCurve(to: CGPoint(x: 0, y: 2.5), controlPoint1: CGPoint(x: 0.06, y: 3.15), controlPoint2: CGPoint(x: 0, y: 2.83))
            fill2.addCurve(to: CGPoint(x: 0.19, y: 1.54), controlPoint1: CGPoint(x: 0, y: 2.17), controlPoint2: CGPoint(x: 0.06, y: 1.85))
            fill2.addCurve(to: CGPoint(x: 0.73, y: 0.73), controlPoint1: CGPoint(x: 0.32, y: 1.24), controlPoint2: CGPoint(x: 0.5, y: 0.97))
            fill2.addCurve(to: CGPoint(x: 1.54, y: 0.19), controlPoint1: CGPoint(x: 0.97, y: 0.5), controlPoint2: CGPoint(x: 1.24, y: 0.32))
            fill2.addCurve(to: CGPoint(x: 2.5, y: 0), controlPoint1: CGPoint(x: 1.85, y: 0.06), controlPoint2: CGPoint(x: 2.17, y: 0))
            fill2.addCurve(to: CGPoint(x: 3.46, y: 0.19), controlPoint1: CGPoint(x: 2.83, y: 0), controlPoint2: CGPoint(x: 3.15, y: 0.06))
            fill2.addCurve(to: CGPoint(x: 4.27, y: 0.73), controlPoint1: CGPoint(x: 3.76, y: 0.32), controlPoint2: CGPoint(x: 4.03, y: 0.5))
            fill2.addCurve(to: CGPoint(x: 4.81, y: 1.54), controlPoint1: CGPoint(x: 4.5, y: 0.97), controlPoint2: CGPoint(x: 4.68, y: 1.24))
            fill2.addCurve(to: CGPoint(x: 5, y: 2.5), controlPoint1: CGPoint(x: 4.94, y: 1.85), controlPoint2: CGPoint(x: 5, y: 2.17))
            fill2.addCurve(to: CGPoint(x: 4.81, y: 3.46), controlPoint1: CGPoint(x: 5, y: 2.83), controlPoint2: CGPoint(x: 4.94, y: 3.15))
            fill2.addCurve(to: CGPoint(x: 4.27, y: 4.27), controlPoint1: CGPoint(x: 4.68, y: 3.76), controlPoint2: CGPoint(x: 4.5, y: 4.03))
            fill2.addCurve(to: CGPoint(x: 3.46, y: 4.81), controlPoint1: CGPoint(x: 4.03, y: 4.5), controlPoint2: CGPoint(x: 3.76, y: 4.68))
            fill2.addCurve(to: CGPoint(x: 2.5, y: 5), controlPoint1: CGPoint(x: 3.15, y: 4.94), controlPoint2: CGPoint(x: 2.83, y: 5))
            fill2.close()
            context.saveGState()
            context.translateBy(x: 11, y: 0)
            fill2.usesEvenOddFillRule = true
            UIColor(hue: 0.667, saturation: 0.081, brightness: 0.58, alpha: 1).setFill()
            fill2.fill()
            context.restoreGState()
            
            /// Fill 3
            let fill3 = UIBezierPath()
            fill3.move(to: CGPoint(x: 2.5, y: 5))
            fill3.addCurve(to: CGPoint(x: 0, y: 2.5), controlPoint1: CGPoint(x: 1.12, y: 5), controlPoint2: CGPoint(x: 0, y: 3.88))
            fill3.addCurve(to: CGPoint(x: 2.5, y: 0), controlPoint1: CGPoint(x: 0, y: 1.12), controlPoint2: CGPoint(x: 1.12, y: 0))
            fill3.addCurve(to: CGPoint(x: 5, y: 2.5), controlPoint1: CGPoint(x: 3.88, y: 0), controlPoint2: CGPoint(x: 5, y: 1.12))
            fill3.addCurve(to: CGPoint(x: 2.5, y: 5), controlPoint1: CGPoint(x: 5, y: 3.88), controlPoint2: CGPoint(x: 3.88, y: 5))
            fill3.close()
            context.saveGState()
            fill3.usesEvenOddFillRule = true
            UIColor(hue: 0.667, saturation: 0.081, brightness: 0.58, alpha: 1).setFill()
            fill3.fill()
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawUpvote(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 15, height: 15), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 15, height: 15), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 15, y: resizedFrame.height / 15)
        
        /// Fill 1
        let fill1 = UIBezierPath()
        fill1.move(to: CGPoint(x: 5.46, y: 15))
        fill1.addLine(to: CGPoint(x: 5.46, y: 8.12))
        fill1.addLine(to: CGPoint(x: 0, y: 8.12))
        fill1.addLine(to: CGPoint(x: 7.5, y: 0))
        fill1.addLine(to: CGPoint(x: 15, y: 8.12))
        fill1.addLine(to: CGPoint(x: 9.76, y: 8.12))
        fill1.addLine(to: CGPoint(x: 9.76, y: 15))
        fill1.addLine(to: CGPoint(x: 5.46, y: 15))
        fill1.close()
        context.saveGState()
        fill1.usesEvenOddFillRule = true
        UIColor(hue: 0.667, saturation: 0.082, brightness: 0.239, alpha: 1).setFill()
        fill1.fill()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawDownvote(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 15, height: 15), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 15, height: 15), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 15, y: resizedFrame.height / 15)
        
        /// Fill 1
        let fill1 = UIBezierPath()
        fill1.move(to: CGPoint(x: 9.54, y: 0))
        fill1.addLine(to: CGPoint(x: 9.54, y: 6.88))
        fill1.addLine(to: CGPoint(x: 15, y: 6.88))
        fill1.addLine(to: CGPoint(x: 7.5, y: 15))
        fill1.addLine(to: CGPoint(x: 0, y: 6.88))
        fill1.addLine(to: CGPoint(x: 5.24, y: 6.88))
        fill1.addLine(to: CGPoint(x: 5.24, y: 0))
        fill1.addLine(to: CGPoint(x: 9.54, y: 0))
        fill1.close()
        context.saveGState()
        fill1.usesEvenOddFillRule = true
        UIColor(hue: 0.667, saturation: 0.082, brightness: 0.239, alpha: 1).setFill()
        fill1.fill()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawComment(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 17, height: 12), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 17, height: 12), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 17, y: resizedFrame.height / 12)
        
        /// Fill 1
        let fill1 = UIBezierPath()
        fill1.move(to: CGPoint(x: 5, y: 0))
        fill1.addLine(to: CGPoint(x: 12, y: 0))
        fill1.addCurve(to: CGPoint(x: 17, y: 5), controlPoint1: CGPoint(x: 14.76, y: 0), controlPoint2: CGPoint(x: 17, y: 2.24))
        fill1.addCurve(to: CGPoint(x: 12, y: 10), controlPoint1: CGPoint(x: 17, y: 7.76), controlPoint2: CGPoint(x: 14.76, y: 10))
        fill1.addLine(to: CGPoint(x: 7.59, y: 10))
        fill1.addLine(to: CGPoint(x: 2.3, y: 11.45))
        fill1.addCurve(to: CGPoint(x: 2.3, y: 9.21), controlPoint1: CGPoint(x: 1.41, y: 11.45), controlPoint2: CGPoint(x: 3.29, y: 9.77))
        fill1.addCurve(to: CGPoint(x: 0, y: 5), controlPoint1: CGPoint(x: 1.04, y: 8.51), controlPoint2: CGPoint(x: 0, y: 6.88))
        fill1.addCurve(to: CGPoint(x: 5, y: 0), controlPoint1: CGPoint(x: 0, y: 2.24), controlPoint2: CGPoint(x: 2.24, y: 0))
        fill1.close()
        context.saveGState()
        fill1.usesEvenOddFillRule = true
        UIColor(hue: 0.667, saturation: 0.082, brightness: 0.239, alpha: 1).setFill()
        fill1.fill()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawAuthor(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 10, height: 11), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 10, height: 11), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 10, y: resizedFrame.height / 11)
        
        /// component-10-5
        do {
            context.saveGState()
            
            /// Group 3
            do {
                context.saveGState()
                context.translateBy(x: 0, y: 4)
                
                /// Fill 1
                let fill1 = UIBezierPath()
                fill1.move(to: CGPoint(x: 4.47, y: 6.07))
                fill1.addCurve(to: CGPoint(x: 0, y: 4.5), controlPoint1: CGPoint(x: 2, y: 6.07), controlPoint2: CGPoint(x: 0, y: 5.37))
                fill1.addCurve(to: CGPoint(x: 4.47, y: 0), controlPoint1: CGPoint(x: 0, y: 2.02), controlPoint2: CGPoint(x: 2, y: 0))
                fill1.addCurve(to: CGPoint(x: 8.94, y: 4.5), controlPoint1: CGPoint(x: 6.93, y: 0), controlPoint2: CGPoint(x: 8.94, y: 2.02))
                fill1.addCurve(to: CGPoint(x: 4.47, y: 6.07), controlPoint1: CGPoint(x: 8.94, y: 5.37), controlPoint2: CGPoint(x: 6.93, y: 6.07))
                fill1.close()
                context.saveGState()
                context.translateBy(x: 0.5, y: 0.43)
                context.restoreGState()
                
                /// Combined Shape
                let combinedShape = UIBezierPath()
                combinedShape.move(to: CGPoint(x: 4.56, y: 0.76))
                combinedShape.addLine(to: CGPoint(x: 4.38, y: 0.79))
                combinedShape.addCurve(to: CGPoint(x: 1, y: 4.74), controlPoint1: CGPoint(x: 2.47, y: 1.07), controlPoint2: CGPoint(x: 1, y: 2.74))
                combinedShape.addCurve(to: CGPoint(x: 1.9, y: 5.36), controlPoint1: CGPoint(x: 1, y: 4.85), controlPoint2: CGPoint(x: 1.24, y: 5.12))
                combinedShape.addCurve(to: CGPoint(x: 4.97, y: 5.81), controlPoint1: CGPoint(x: 2.68, y: 5.65), controlPoint2: CGPoint(x: 3.8, y: 5.81))
                combinedShape.addCurve(to: CGPoint(x: 8.04, y: 5.36), controlPoint1: CGPoint(x: 6.14, y: 5.81), controlPoint2: CGPoint(x: 7.25, y: 5.65))
                combinedShape.addCurve(to: CGPoint(x: 8.94, y: 4.74), controlPoint1: CGPoint(x: 8.69, y: 5.12), controlPoint2: CGPoint(x: 8.94, y: 4.85))
                combinedShape.addCurve(to: CGPoint(x: 5.42, y: 0.77), controlPoint1: CGPoint(x: 8.94, y: 2.69), controlPoint2: CGPoint(x: 7.39, y: 0.99))
                combinedShape.addCurve(to: CGPoint(x: 6.6, y: 0.02), controlPoint1: CGPoint(x: 5.9, y: 0.67), controlPoint2: CGPoint(x: 6.31, y: 0.4))
                combinedShape.addCurve(to: CGPoint(x: 9.94, y: 4.74), controlPoint1: CGPoint(x: 8.54, y: 0.7), controlPoint2: CGPoint(x: 9.94, y: 2.56))
                combinedShape.addCurve(to: CGPoint(x: 4.97, y: 6.81), controlPoint1: CGPoint(x: 9.94, y: 6.12), controlPoint2: CGPoint(x: 7.45, y: 6.81))
                combinedShape.addCurve(to: CGPoint(x: 0, y: 4.74), controlPoint1: CGPoint(x: 2.48, y: 6.81), controlPoint2: CGPoint(x: 0, y: 6.12))
                combinedShape.addCurve(to: CGPoint(x: 3.39, y: 0), controlPoint1: CGPoint(x: 0, y: 2.54), controlPoint2: CGPoint(x: 1.42, y: 0.66))
                combinedShape.addCurve(to: CGPoint(x: 4.56, y: 0.76), controlPoint1: CGPoint(x: 3.67, y: 0.38), controlPoint2: CGPoint(x: 4.08, y: 0.66))
                combinedShape.close()
                context.saveGState()
                context.translateBy(x: 0, y: 0.19)
                combinedShape.usesEvenOddFillRule = true
                UIColor(hue: 0.667, saturation: 0.081, brightness: 0.58, alpha: 1).setFill()
                combinedShape.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// Fill 4
            let fill4 = UIBezierPath()
            fill4.move(to: CGPoint(x: 2.47, y: 0))
            fill4.addCurve(to: CGPoint(x: 3.41, y: 0.19), controlPoint1: CGPoint(x: 2.8, y: 0), controlPoint2: CGPoint(x: 3.11, y: 0.06))
            fill4.addCurve(to: CGPoint(x: 4.21, y: 0.73), controlPoint1: CGPoint(x: 3.71, y: 0.32), controlPoint2: CGPoint(x: 3.98, y: 0.5))
            fill4.addCurve(to: CGPoint(x: 4.75, y: 1.54), controlPoint1: CGPoint(x: 4.44, y: 0.97), controlPoint2: CGPoint(x: 4.62, y: 1.24))
            fill4.addCurve(to: CGPoint(x: 4.94, y: 2.5), controlPoint1: CGPoint(x: 4.87, y: 1.85), controlPoint2: CGPoint(x: 4.94, y: 2.17))
            fill4.addCurve(to: CGPoint(x: 4.75, y: 3.46), controlPoint1: CGPoint(x: 4.94, y: 2.83), controlPoint2: CGPoint(x: 4.87, y: 3.15))
            fill4.addCurve(to: CGPoint(x: 4.21, y: 4.27), controlPoint1: CGPoint(x: 4.62, y: 3.76), controlPoint2: CGPoint(x: 4.44, y: 4.03))
            fill4.addCurve(to: CGPoint(x: 3.41, y: 4.81), controlPoint1: CGPoint(x: 3.98, y: 4.5), controlPoint2: CGPoint(x: 3.71, y: 4.68))
            fill4.addCurve(to: CGPoint(x: 2.47, y: 5), controlPoint1: CGPoint(x: 3.11, y: 4.94), controlPoint2: CGPoint(x: 2.8, y: 5))
            fill4.addCurve(to: CGPoint(x: 1.52, y: 4.81), controlPoint1: CGPoint(x: 2.14, y: 5), controlPoint2: CGPoint(x: 1.83, y: 4.94))
            fill4.addCurve(to: CGPoint(x: 0.72, y: 4.27), controlPoint1: CGPoint(x: 1.22, y: 4.68), controlPoint2: CGPoint(x: 0.95, y: 4.5))
            fill4.addCurve(to: CGPoint(x: 0.19, y: 3.46), controlPoint1: CGPoint(x: 0.49, y: 4.03), controlPoint2: CGPoint(x: 0.31, y: 3.76))
            fill4.addCurve(to: CGPoint(x: 0, y: 2.5), controlPoint1: CGPoint(x: 0.06, y: 3.15), controlPoint2: CGPoint(x: 0, y: 2.83))
            fill4.addCurve(to: CGPoint(x: 0.19, y: 1.54), controlPoint1: CGPoint(x: 0, y: 2.17), controlPoint2: CGPoint(x: 0.06, y: 1.85))
            fill4.addCurve(to: CGPoint(x: 0.72, y: 0.73), controlPoint1: CGPoint(x: 0.31, y: 1.24), controlPoint2: CGPoint(x: 0.49, y: 0.97))
            fill4.addCurve(to: CGPoint(x: 1.52, y: 0.19), controlPoint1: CGPoint(x: 0.95, y: 0.5), controlPoint2: CGPoint(x: 1.22, y: 0.32))
            fill4.addCurve(to: CGPoint(x: 2.47, y: 0), controlPoint1: CGPoint(x: 1.83, y: 0.06), controlPoint2: CGPoint(x: 2.14, y: 0))
            fill4.close()
            context.saveGState()
            context.translateBy(x: 2.5, y: 0.5)
            context.restoreGState()
            
            /// Group 7
            do {
                context.saveGState()
                context.translateBy(x: 2, y: 0)
                
                /// Clip 6
                let clip6 = UIBezierPath()
                clip6.move(to: CGPoint(x: 0, y: 3))
                clip6.addCurve(to: CGPoint(x: 0.87, y: 0.88), controlPoint1: CGPoint(x: 0, y: 2.17), controlPoint2: CGPoint(x: 0.29, y: 1.46))
                clip6.addCurve(to: CGPoint(x: 2.97, y: 0), controlPoint1: CGPoint(x: 1.45, y: 0.29), controlPoint2: CGPoint(x: 2.15, y: 0))
                clip6.addCurve(to: CGPoint(x: 5.07, y: 0.88), controlPoint1: CGPoint(x: 3.79, y: 0), controlPoint2: CGPoint(x: 4.49, y: 0.29))
                clip6.addCurve(to: CGPoint(x: 5.94, y: 3), controlPoint1: CGPoint(x: 5.65, y: 1.46), controlPoint2: CGPoint(x: 5.94, y: 2.17))
                clip6.addCurve(to: CGPoint(x: 5.07, y: 5.12), controlPoint1: CGPoint(x: 5.94, y: 3.83), controlPoint2: CGPoint(x: 5.65, y: 4.54))
                clip6.addCurve(to: CGPoint(x: 2.97, y: 6), controlPoint1: CGPoint(x: 4.49, y: 5.71), controlPoint2: CGPoint(x: 3.79, y: 6))
                clip6.addCurve(to: CGPoint(x: 0.87, y: 5.12), controlPoint1: CGPoint(x: 2.15, y: 6), controlPoint2: CGPoint(x: 1.45, y: 5.71))
                clip6.addCurve(to: CGPoint(x: 0, y: 3), controlPoint1: CGPoint(x: 0.29, y: 4.54), controlPoint2: CGPoint(x: 0, y: 3.83))
                clip6.close()
                
                /// Clip 6 (Outline Mask)
                context.saveGState()
                clip6.addClip()
                
                /// Stroke 5
                let stroke5 = UIBezierPath()
                stroke5.move(to: CGPoint(x: 2.97, y: 0))
                stroke5.addCurve(to: CGPoint(x: 4.1, y: 0.23), controlPoint1: CGPoint(x: 3.36, y: 0), controlPoint2: CGPoint(x: 3.74, y: 0.08))
                stroke5.addCurve(to: CGPoint(x: 5.07, y: 0.88), controlPoint1: CGPoint(x: 4.47, y: 0.38), controlPoint2: CGPoint(x: 4.79, y: 0.6))
                stroke5.addCurve(to: CGPoint(x: 5.71, y: 1.85), controlPoint1: CGPoint(x: 5.34, y: 1.16), controlPoint2: CGPoint(x: 5.56, y: 1.48))
                stroke5.addCurve(to: CGPoint(x: 5.94, y: 3), controlPoint1: CGPoint(x: 5.86, y: 2.22), controlPoint2: CGPoint(x: 5.94, y: 2.6))
                stroke5.addCurve(to: CGPoint(x: 5.71, y: 4.15), controlPoint1: CGPoint(x: 5.94, y: 3.4), controlPoint2: CGPoint(x: 5.86, y: 3.78))
                stroke5.addCurve(to: CGPoint(x: 5.07, y: 5.12), controlPoint1: CGPoint(x: 5.56, y: 4.52), controlPoint2: CGPoint(x: 5.34, y: 4.84))
                stroke5.addCurve(to: CGPoint(x: 4.1, y: 5.77), controlPoint1: CGPoint(x: 4.79, y: 5.4), controlPoint2: CGPoint(x: 4.47, y: 5.62))
                stroke5.addCurve(to: CGPoint(x: 2.97, y: 6), controlPoint1: CGPoint(x: 3.74, y: 5.92), controlPoint2: CGPoint(x: 3.36, y: 6))
                stroke5.addCurve(to: CGPoint(x: 1.83, y: 5.77), controlPoint1: CGPoint(x: 2.57, y: 6), controlPoint2: CGPoint(x: 2.2, y: 5.92))
                stroke5.addCurve(to: CGPoint(x: 0.87, y: 5.12), controlPoint1: CGPoint(x: 1.47, y: 5.62), controlPoint2: CGPoint(x: 1.15, y: 5.4))
                stroke5.addCurve(to: CGPoint(x: 0.23, y: 4.15), controlPoint1: CGPoint(x: 0.59, y: 4.84), controlPoint2: CGPoint(x: 0.38, y: 4.52))
                stroke5.addCurve(to: CGPoint(x: 0, y: 3), controlPoint1: CGPoint(x: 0.08, y: 3.78), controlPoint2: CGPoint(x: 0, y: 3.4))
                stroke5.addCurve(to: CGPoint(x: 0.23, y: 1.85), controlPoint1: CGPoint(x: 0, y: 2.6), controlPoint2: CGPoint(x: 0.08, y: 2.22))
                stroke5.addCurve(to: CGPoint(x: 0.87, y: 0.88), controlPoint1: CGPoint(x: 0.38, y: 1.48), controlPoint2: CGPoint(x: 0.59, y: 1.16))
                stroke5.addCurve(to: CGPoint(x: 1.83, y: 0.23), controlPoint1: CGPoint(x: 1.15, y: 0.6), controlPoint2: CGPoint(x: 1.47, y: 0.38))
                stroke5.addCurve(to: CGPoint(x: 2.97, y: 0), controlPoint1: CGPoint(x: 2.2, y: 0.08), controlPoint2: CGPoint(x: 2.57, y: 0))
                stroke5.close()
                context.saveGState()
                stroke5.lineWidth = 2
                UIColor(hue: 0.667, saturation: 0.081, brightness: 0.58, alpha: 1).setStroke()
                stroke5.stroke()
                context.restoreGState()
                
                context.restoreGState()
                // End Clip 6 (Outline Mask)
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawClock(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 11, height: 11), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 11, height: 11), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 11, y: resizedFrame.height / 11)
        
        /// component-11-7
        do {
            context.saveGState()
            
            /// Group 3
            do {
                context.saveGState()
                
                /// Fill 1
                let fill1 = UIBezierPath()
                fill1.move(to: CGPoint(x: 5, y: 10))
                fill1.addCurve(to: CGPoint(x: 0, y: 5), controlPoint1: CGPoint(x: 2.24, y: 10), controlPoint2: CGPoint(x: 0, y: 7.76))
                fill1.addCurve(to: CGPoint(x: 5, y: 0), controlPoint1: CGPoint(x: 0, y: 2.24), controlPoint2: CGPoint(x: 2.24, y: 0))
                fill1.addCurve(to: CGPoint(x: 10, y: 5), controlPoint1: CGPoint(x: 7.76, y: 0), controlPoint2: CGPoint(x: 10, y: 2.24))
                fill1.addCurve(to: CGPoint(x: 5, y: 10), controlPoint1: CGPoint(x: 10, y: 7.76), controlPoint2: CGPoint(x: 7.76, y: 10))
                fill1.close()
                context.saveGState()
                context.translateBy(x: 0.5, y: 0.5)
                context.restoreGState()
                
                /// Fill 2
                let fill2 = UIBezierPath()
                fill2.move(to: CGPoint(x: 5.5, y: 1))
                fill2.addCurve(to: CGPoint(x: 1, y: 5.5), controlPoint1: CGPoint(x: 3.02, y: 1), controlPoint2: CGPoint(x: 1, y: 3.02))
                fill2.addCurve(to: CGPoint(x: 5.5, y: 10), controlPoint1: CGPoint(x: 1, y: 7.98), controlPoint2: CGPoint(x: 3.02, y: 10))
                fill2.addCurve(to: CGPoint(x: 10, y: 5.5), controlPoint1: CGPoint(x: 7.98, y: 10), controlPoint2: CGPoint(x: 10, y: 7.98))
                fill2.addCurve(to: CGPoint(x: 5.5, y: 1), controlPoint1: CGPoint(x: 10, y: 3.02), controlPoint2: CGPoint(x: 7.98, y: 1))
                fill2.addLine(to: CGPoint(x: 5.5, y: 1))
                fill2.close()
                fill2.move(to: CGPoint(x: 5.5, y: 0))
                fill2.addCurve(to: CGPoint(x: 11, y: 5.5), controlPoint1: CGPoint(x: 8.54, y: 0), controlPoint2: CGPoint(x: 11, y: 2.46))
                fill2.addCurve(to: CGPoint(x: 5.5, y: 11), controlPoint1: CGPoint(x: 11, y: 8.54), controlPoint2: CGPoint(x: 8.54, y: 11))
                fill2.addCurve(to: CGPoint(x: 0, y: 5.5), controlPoint1: CGPoint(x: 2.46, y: 11), controlPoint2: CGPoint(x: 0, y: 8.54))
                fill2.addCurve(to: CGPoint(x: 5.5, y: 0), controlPoint1: CGPoint(x: 0, y: 2.46), controlPoint2: CGPoint(x: 2.46, y: 0))
                fill2.close()
                context.saveGState()
                fill2.usesEvenOddFillRule = true
                UIColor(hue: 0.667, saturation: 0.081, brightness: 0.58, alpha: 1).setFill()
                fill2.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// Stroke 4
            let stroke4 = UIBezierPath()
            stroke4.move(to: CGPoint.zero)
            stroke4.addLine(to: CGPoint(x: 0, y: 3))
            stroke4.addLine(to: CGPoint(x: 2.06, y: 3))
            context.saveGState()
            context.translateBy(x: 5.5, y: 2.2)
            stroke4.lineJoinStyle = .round
            stroke4.lineCapStyle = .round
            stroke4.lineWidth = 1
            UIColor(hue: 0.667, saturation: 0.081, brightness: 0.58, alpha: 1).setStroke()
            stroke4.stroke()
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawCategory(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 4, height: 10), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 4, height: 10), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 4, y: resizedFrame.height / 10)
        
        /// Stroke 1
        let stroke1 = UIBezierPath()
        stroke1.move(to: CGPoint.zero)
        stroke1.addLine(to: CGPoint(x: 4, y: 0))
        stroke1.addLine(to: CGPoint(x: 4, y: 10))
        stroke1.addLine(to: CGPoint(x: 0, y: 10))
        stroke1.addLine(to: CGPoint.zero)
        stroke1.close()
        context.saveGState()
        stroke1.lineJoinStyle = .round
        stroke1.lineCapStyle = .round
        stroke1.lineWidth = 1
        UIColor(hue: 0.667, saturation: 0.081, brightness: 0.58, alpha: 1).setStroke()
        stroke1.stroke()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawMoreV(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 3, height: 14), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 3, height: 14), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 3, y: resizedFrame.height / 14)
        
        /// More
        do {
            context.saveGState()
            
            /// Fill 1
            let fill1 = UIBezierPath()
            fill1.move(to: CGPoint(x: 3, y: 1.5))
            fill1.addCurve(to: CGPoint(x: 2.89, y: 2.07), controlPoint1: CGPoint(x: 3, y: 1.7), controlPoint2: CGPoint(x: 2.96, y: 1.89))
            fill1.addCurve(to: CGPoint(x: 2.56, y: 2.56), controlPoint1: CGPoint(x: 2.81, y: 2.26), controlPoint2: CGPoint(x: 2.7, y: 2.42))
            fill1.addCurve(to: CGPoint(x: 2.07, y: 2.89), controlPoint1: CGPoint(x: 2.42, y: 2.7), controlPoint2: CGPoint(x: 2.26, y: 2.81))
            fill1.addCurve(to: CGPoint(x: 1.5, y: 3), controlPoint1: CGPoint(x: 1.89, y: 2.96), controlPoint2: CGPoint(x: 1.7, y: 3))
            fill1.addCurve(to: CGPoint(x: 0.93, y: 2.89), controlPoint1: CGPoint(x: 1.3, y: 3), controlPoint2: CGPoint(x: 1.11, y: 2.96))
            fill1.addCurve(to: CGPoint(x: 0.44, y: 2.56), controlPoint1: CGPoint(x: 0.74, y: 2.81), controlPoint2: CGPoint(x: 0.58, y: 2.7))
            fill1.addCurve(to: CGPoint(x: 0.11, y: 2.07), controlPoint1: CGPoint(x: 0.3, y: 2.42), controlPoint2: CGPoint(x: 0.19, y: 2.26))
            fill1.addCurve(to: CGPoint(x: 0, y: 1.5), controlPoint1: CGPoint(x: 0.04, y: 1.89), controlPoint2: CGPoint(x: 0, y: 1.7))
            fill1.addCurve(to: CGPoint(x: 0.11, y: 0.93), controlPoint1: CGPoint(x: 0, y: 1.3), controlPoint2: CGPoint(x: 0.04, y: 1.11))
            fill1.addCurve(to: CGPoint(x: 0.44, y: 0.44), controlPoint1: CGPoint(x: 0.19, y: 0.74), controlPoint2: CGPoint(x: 0.3, y: 0.58))
            fill1.addCurve(to: CGPoint(x: 0.93, y: 0.11), controlPoint1: CGPoint(x: 0.58, y: 0.3), controlPoint2: CGPoint(x: 0.74, y: 0.19))
            fill1.addCurve(to: CGPoint(x: 1.5, y: 0), controlPoint1: CGPoint(x: 1.11, y: 0.04), controlPoint2: CGPoint(x: 1.3, y: 0))
            fill1.addCurve(to: CGPoint(x: 2.07, y: 0.11), controlPoint1: CGPoint(x: 1.7, y: 0), controlPoint2: CGPoint(x: 1.89, y: 0.04))
            fill1.addCurve(to: CGPoint(x: 2.56, y: 0.44), controlPoint1: CGPoint(x: 2.26, y: 0.19), controlPoint2: CGPoint(x: 2.42, y: 0.3))
            fill1.addCurve(to: CGPoint(x: 2.89, y: 0.93), controlPoint1: CGPoint(x: 2.7, y: 0.58), controlPoint2: CGPoint(x: 2.81, y: 0.74))
            fill1.addCurve(to: CGPoint(x: 3, y: 1.5), controlPoint1: CGPoint(x: 2.96, y: 1.11), controlPoint2: CGPoint(x: 3, y: 1.3))
            fill1.close()
            context.saveGState()
            fill1.usesEvenOddFillRule = true
            UIColor(hue: 0.667, saturation: 0.081, brightness: 0.58, alpha: 1).setFill()
            fill1.fill()
            context.restoreGState()
            
            /// Fill 2
            let fill2 = UIBezierPath()
            fill2.move(to: CGPoint(x: 3, y: 1.5))
            fill2.addCurve(to: CGPoint(x: 2.89, y: 2.07), controlPoint1: CGPoint(x: 3, y: 1.7), controlPoint2: CGPoint(x: 2.96, y: 1.89))
            fill2.addCurve(to: CGPoint(x: 2.56, y: 2.56), controlPoint1: CGPoint(x: 2.81, y: 2.26), controlPoint2: CGPoint(x: 2.7, y: 2.42))
            fill2.addCurve(to: CGPoint(x: 2.07, y: 2.89), controlPoint1: CGPoint(x: 2.42, y: 2.7), controlPoint2: CGPoint(x: 2.26, y: 2.81))
            fill2.addCurve(to: CGPoint(x: 1.5, y: 3), controlPoint1: CGPoint(x: 1.89, y: 2.96), controlPoint2: CGPoint(x: 1.7, y: 3))
            fill2.addCurve(to: CGPoint(x: 0.93, y: 2.89), controlPoint1: CGPoint(x: 1.3, y: 3), controlPoint2: CGPoint(x: 1.11, y: 2.96))
            fill2.addCurve(to: CGPoint(x: 0.44, y: 2.56), controlPoint1: CGPoint(x: 0.74, y: 2.81), controlPoint2: CGPoint(x: 0.58, y: 2.7))
            fill2.addCurve(to: CGPoint(x: 0.11, y: 2.07), controlPoint1: CGPoint(x: 0.3, y: 2.42), controlPoint2: CGPoint(x: 0.19, y: 2.26))
            fill2.addCurve(to: CGPoint(x: 0, y: 1.5), controlPoint1: CGPoint(x: 0.04, y: 1.89), controlPoint2: CGPoint(x: 0, y: 1.7))
            fill2.addCurve(to: CGPoint(x: 0.11, y: 0.93), controlPoint1: CGPoint(x: 0, y: 1.3), controlPoint2: CGPoint(x: 0.04, y: 1.11))
            fill2.addCurve(to: CGPoint(x: 0.44, y: 0.44), controlPoint1: CGPoint(x: 0.19, y: 0.74), controlPoint2: CGPoint(x: 0.3, y: 0.58))
            fill2.addCurve(to: CGPoint(x: 0.93, y: 0.11), controlPoint1: CGPoint(x: 0.58, y: 0.3), controlPoint2: CGPoint(x: 0.74, y: 0.19))
            fill2.addCurve(to: CGPoint(x: 1.5, y: 0), controlPoint1: CGPoint(x: 1.11, y: 0.04), controlPoint2: CGPoint(x: 1.3, y: 0))
            fill2.addCurve(to: CGPoint(x: 2.07, y: 0.11), controlPoint1: CGPoint(x: 1.7, y: 0), controlPoint2: CGPoint(x: 1.89, y: 0.04))
            fill2.addCurve(to: CGPoint(x: 2.56, y: 0.44), controlPoint1: CGPoint(x: 2.26, y: 0.19), controlPoint2: CGPoint(x: 2.42, y: 0.3))
            fill2.addCurve(to: CGPoint(x: 2.89, y: 0.93), controlPoint1: CGPoint(x: 2.7, y: 0.58), controlPoint2: CGPoint(x: 2.81, y: 0.74))
            fill2.addCurve(to: CGPoint(x: 3, y: 1.5), controlPoint1: CGPoint(x: 2.96, y: 1.11), controlPoint2: CGPoint(x: 3, y: 1.3))
            fill2.close()
            context.saveGState()
            context.translateBy(x: 0, y: 6)
            fill2.usesEvenOddFillRule = true
            UIColor(hue: 0.667, saturation: 0.081, brightness: 0.58, alpha: 1).setFill()
            fill2.fill()
            context.restoreGState()
            
            /// Fill 3
            let fill3 = UIBezierPath()
            fill3.move(to: CGPoint(x: 3, y: 1.5))
            fill3.addCurve(to: CGPoint(x: 2.89, y: 2.07), controlPoint1: CGPoint(x: 3, y: 1.7), controlPoint2: CGPoint(x: 2.96, y: 1.89))
            fill3.addCurve(to: CGPoint(x: 2.56, y: 2.56), controlPoint1: CGPoint(x: 2.81, y: 2.26), controlPoint2: CGPoint(x: 2.7, y: 2.42))
            fill3.addCurve(to: CGPoint(x: 2.07, y: 2.89), controlPoint1: CGPoint(x: 2.42, y: 2.7), controlPoint2: CGPoint(x: 2.26, y: 2.81))
            fill3.addCurve(to: CGPoint(x: 1.5, y: 3), controlPoint1: CGPoint(x: 1.89, y: 2.96), controlPoint2: CGPoint(x: 1.7, y: 3))
            fill3.addCurve(to: CGPoint(x: 0.93, y: 2.89), controlPoint1: CGPoint(x: 1.3, y: 3), controlPoint2: CGPoint(x: 1.11, y: 2.96))
            fill3.addCurve(to: CGPoint(x: 0.44, y: 2.56), controlPoint1: CGPoint(x: 0.74, y: 2.81), controlPoint2: CGPoint(x: 0.58, y: 2.7))
            fill3.addCurve(to: CGPoint(x: 0.11, y: 2.07), controlPoint1: CGPoint(x: 0.3, y: 2.42), controlPoint2: CGPoint(x: 0.19, y: 2.26))
            fill3.addCurve(to: CGPoint(x: 0, y: 1.5), controlPoint1: CGPoint(x: 0.04, y: 1.89), controlPoint2: CGPoint(x: 0, y: 1.7))
            fill3.addCurve(to: CGPoint(x: 0.11, y: 0.93), controlPoint1: CGPoint(x: 0, y: 1.3), controlPoint2: CGPoint(x: 0.04, y: 1.11))
            fill3.addCurve(to: CGPoint(x: 0.44, y: 0.44), controlPoint1: CGPoint(x: 0.19, y: 0.74), controlPoint2: CGPoint(x: 0.3, y: 0.58))
            fill3.addCurve(to: CGPoint(x: 0.93, y: 0.11), controlPoint1: CGPoint(x: 0.58, y: 0.3), controlPoint2: CGPoint(x: 0.74, y: 0.19))
            fill3.addCurve(to: CGPoint(x: 1.5, y: 0), controlPoint1: CGPoint(x: 1.11, y: 0.04), controlPoint2: CGPoint(x: 1.3, y: 0))
            fill3.addCurve(to: CGPoint(x: 2.07, y: 0.11), controlPoint1: CGPoint(x: 1.7, y: 0), controlPoint2: CGPoint(x: 1.89, y: 0.04))
            fill3.addCurve(to: CGPoint(x: 2.56, y: 0.44), controlPoint1: CGPoint(x: 2.26, y: 0.19), controlPoint2: CGPoint(x: 2.42, y: 0.3))
            fill3.addCurve(to: CGPoint(x: 2.89, y: 0.93), controlPoint1: CGPoint(x: 2.7, y: 0.58), controlPoint2: CGPoint(x: 2.81, y: 0.74))
            fill3.addCurve(to: CGPoint(x: 3, y: 1.5), controlPoint1: CGPoint(x: 2.96, y: 1.11), controlPoint2: CGPoint(x: 3, y: 1.3))
            fill3.close()
            context.saveGState()
            context.translateBy(x: 0, y: 11)
            fill3.usesEvenOddFillRule = true
            UIColor(hue: 0.667, saturation: 0.081, brightness: 0.58, alpha: 1).setFill()
            fill3.fill()
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawFavorite(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 24, height: 20), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 24, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 24, y: resizedFrame.height / 20)
        
        /// Fill 1
        let fill1 = UIBezierPath()
        fill1.move(to: CGPoint(x: 12, y: 20))
        fill1.addLine(to: CGPoint(x: 10.26, y: 18.56))
        fill1.addCurve(to: CGPoint(x: 0, y: 5.99), controlPoint1: CGPoint(x: 4.08, y: 13.47), controlPoint2: CGPoint(x: 0, y: 10.11))
        fill1.addCurve(to: CGPoint(x: 6.6, y: 0), controlPoint1: CGPoint(x: 0, y: 2.64), controlPoint2: CGPoint(x: 2.9, y: 0))
        fill1.addCurve(to: CGPoint(x: 12, y: 2.28), controlPoint1: CGPoint(x: 8.69, y: 0), controlPoint2: CGPoint(x: 10.69, y: 0.88))
        fill1.addCurve(to: CGPoint(x: 17.4, y: 0), controlPoint1: CGPoint(x: 13.31, y: 0.88), controlPoint2: CGPoint(x: 15.31, y: 0))
        fill1.addCurve(to: CGPoint(x: 24, y: 5.99), controlPoint1: CGPoint(x: 21.1, y: 0), controlPoint2: CGPoint(x: 24, y: 2.64))
        fill1.addCurve(to: CGPoint(x: 13.74, y: 18.57), controlPoint1: CGPoint(x: 24, y: 10.11), controlPoint2: CGPoint(x: 19.92, y: 13.47))
        fill1.addLine(to: CGPoint(x: 12, y: 20))
        fill1.close()
        context.saveGState()
        fill1.usesEvenOddFillRule = true
        UIColor(hue: 0.667, saturation: 0.078, brightness: 0.4, alpha: 1).setFill()
        fill1.fill()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawFavoriteTabBar(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 24, height: 24), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 24, height: 24), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 24, y: resizedFrame.height / 24)
        
        /// favorite-24-px
        do {
            context.saveGState()
            
            /// Path_79
            let path_79 = UIBezierPath()
            path_79.move(to: CGPoint.zero)
            path_79.addLine(to: CGPoint(x: 24, y: 0))
            path_79.addLine(to: CGPoint(x: 24, y: 24))
            path_79.addLine(to: CGPoint(x: 0, y: 24))
            path_79.addLine(to: CGPoint.zero)
            path_79.close()
            context.saveGState()
            UIColor.clear.setFill()
            path_79.fill()
            context.restoreGState()
            
            /// Path_80
            let path_80 = UIBezierPath()
            path_80.move(to: CGPoint(x: 10, y: 18.35))
            path_80.addLine(to: CGPoint(x: 8.55, y: 17.03))
            path_80.addCurve(to: CGPoint(x: 0, y: 5.5), controlPoint1: CGPoint(x: 3.4, y: 12.36), controlPoint2: CGPoint(x: 0, y: 9.28))
            path_80.addCurve(to: CGPoint(x: 1.6, y: 1.6), controlPoint1: CGPoint(x: -0.01, y: 4.04), controlPoint2: CGPoint(x: 0.56, y: 2.63))
            path_80.addCurve(to: CGPoint(x: 5.5, y: 0), controlPoint1: CGPoint(x: 2.63, y: 0.56), controlPoint2: CGPoint(x: 4.04, y: -0.01))
            path_80.addCurve(to: CGPoint(x: 10, y: 2.09), controlPoint1: CGPoint(x: 7.23, y: 0.01), controlPoint2: CGPoint(x: 8.87, y: 0.78))
            path_80.addCurve(to: CGPoint(x: 14.5, y: 0), controlPoint1: CGPoint(x: 11.13, y: 0.78), controlPoint2: CGPoint(x: 12.77, y: 0.01))
            path_80.addCurve(to: CGPoint(x: 18.41, y: 1.6), controlPoint1: CGPoint(x: 15.96, y: -0.01), controlPoint2: CGPoint(x: 17.37, y: 0.56))
            path_80.addCurve(to: CGPoint(x: 20, y: 5.5), controlPoint1: CGPoint(x: 19.44, y: 2.63), controlPoint2: CGPoint(x: 20.01, y: 4.04))
            path_80.addCurve(to: CGPoint(x: 11.45, y: 17.04), controlPoint1: CGPoint(x: 20, y: 9.28), controlPoint2: CGPoint(x: 16.6, y: 12.36))
            path_80.addLine(to: CGPoint(x: 10, y: 18.35))
            path_80.close()
            context.saveGState()
            context.translateBy(x: 2, y: 3)
            UIColor(hue: 0.667, saturation: 0.081, brightness: 0.58, alpha: 1).setFill()
            path_80.fill()
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawHotTopic(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 24, height: 24), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 24, height: 24), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 24, y: resizedFrame.height / 24)
        
        /// Path
        let path = UIBezierPath()
        path.move(to: CGPoint.zero)
        path.addLine(to: CGPoint(x: 24, y: 0))
        path.addLine(to: CGPoint(x: 24, y: 24))
        path.addLine(to: CGPoint(x: 0, y: 24))
        path.addLine(to: CGPoint.zero)
        path.close()
        
        /// Shape
        let shape = UIBezierPath()
        shape.move(to: CGPoint(x: 9.5, y: 0))
        shape.addCurve(to: CGPoint(x: 10.24, y: 4.8), controlPoint1: CGPoint(x: 9.93, y: 1.57), controlPoint2: CGPoint(x: 10.18, y: 3.18))
        shape.addCurve(to: CGPoint(x: 9.34, y: 7.4), controlPoint1: CGPoint(x: 10.31, y: 5.75), controlPoint2: CGPoint(x: 9.99, y: 6.7))
        shape.addCurve(to: CGPoint(x: 6.83, y: 8.53), controlPoint1: CGPoint(x: 8.7, y: 8.11), controlPoint2: CGPoint(x: 7.79, y: 8.52))
        shape.addCurve(to: CGPoint(x: 4.23, y: 7.43), controlPoint1: CGPoint(x: 5.85, y: 8.53), controlPoint2: CGPoint(x: 4.91, y: 8.13))
        shape.addCurve(to: CGPoint(x: 3.2, y: 4.8), controlPoint1: CGPoint(x: 3.55, y: 6.73), controlPoint2: CGPoint(x: 3.18, y: 5.78))
        shape.addLine(to: CGPoint(x: 3.23, y: 4.44))
        shape.addCurve(to: CGPoint(x: 0, y: 13.33), controlPoint1: CGPoint(x: 1.14, y: 6.93), controlPoint2: CGPoint(x: -0.01, y: 10.08))
        shape.addCurve(to: CGPoint(x: 8, y: 21.33), controlPoint1: CGPoint(x: 0, y: 17.75), controlPoint2: CGPoint(x: 3.58, y: 21.33))
        shape.addCurve(to: CGPoint(x: 16, y: 13.33), controlPoint1: CGPoint(x: 12.42, y: 21.33), controlPoint2: CGPoint(x: 16, y: 17.75))
        shape.addCurve(to: CGPoint(x: 9.5, y: 0), controlPoint1: CGPoint(x: 15.97, y: 8.13), controlPoint2: CGPoint(x: 13.58, y: 3.23))
        shape.close()
        shape.move(to: CGPoint(x: 7.71, y: 18.33))
        shape.addCurve(to: CGPoint(x: 5.45, y: 17.43), controlPoint1: CGPoint(x: 6.87, y: 18.34), controlPoint2: CGPoint(x: 6.05, y: 18.02))
        shape.addCurve(to: CGPoint(x: 4.49, y: 15.19), controlPoint1: CGPoint(x: 4.84, y: 16.84), controlPoint2: CGPoint(x: 4.5, y: 16.03))
        shape.addCurve(to: CGPoint(x: 7.3, y: 12.07), controlPoint1: CGPoint(x: 4.49, y: 13.58), controlPoint2: CGPoint(x: 5.7, y: 12.24))
        shape.addCurve(to: CGPoint(x: 11.92, y: 9.49), controlPoint1: CGPoint(x: 9.1, y: 11.78), controlPoint2: CGPoint(x: 10.73, y: 10.87))
        shape.addCurve(to: CGPoint(x: 12.51, y: 13.53), controlPoint1: CGPoint(x: 12.31, y: 10.8), controlPoint2: CGPoint(x: 12.51, y: 12.16))
        shape.addCurve(to: CGPoint(x: 7.71, y: 18.33), controlPoint1: CGPoint(x: 12.51, y: 16.18), controlPoint2: CGPoint(x: 10.36, y: 18.33))
        shape.addLine(to: CGPoint(x: 7.71, y: 18.33))
        shape.close()
        context.saveGState()
        context.translateBy(x: 4, y: 0.67)
        UIColor(hue: 0.667, saturation: 0.081, brightness: 0.58, alpha: 1).setFill()
        shape.fill()
        context.restoreGState()
        
        /// whatshot-24-px
        do {
            context.saveGState()
            context.translateBy(x: 4, y: 0)
            
            // Empty.
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawProfile(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 26, height: 26), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 26, height: 26), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 26, y: resizedFrame.height / 26)
        
        /// person-24-px
        do {
            context.saveGState()
            
            /// Path
            let path = UIBezierPath()
            path.move(to: CGPoint.zero)
            path.addLine(to: CGPoint(x: 26, y: 0))
            path.addLine(to: CGPoint(x: 26, y: 26))
            path.addLine(to: CGPoint(x: 0, y: 26))
            path.addLine(to: CGPoint.zero)
            path.close()
            
            /// Shape
            let shape = UIBezierPath()
            shape.move(to: CGPoint(x: 9, y: 9))
            shape.addCurve(to: CGPoint(x: 13.5, y: 4.5), controlPoint1: CGPoint(x: 11.49, y: 9), controlPoint2: CGPoint(x: 13.5, y: 6.99))
            shape.addCurve(to: CGPoint(x: 9, y: 0), controlPoint1: CGPoint(x: 13.5, y: 2.01), controlPoint2: CGPoint(x: 11.49, y: 0))
            shape.addCurve(to: CGPoint(x: 4.5, y: 4.5), controlPoint1: CGPoint(x: 6.51, y: 0), controlPoint2: CGPoint(x: 4.5, y: 2.01))
            shape.addCurve(to: CGPoint(x: 9, y: 9), controlPoint1: CGPoint(x: 4.5, y: 6.99), controlPoint2: CGPoint(x: 6.51, y: 9))
            shape.addLine(to: CGPoint(x: 9, y: 9))
            shape.close()
            shape.move(to: CGPoint(x: 9, y: 11.25))
            shape.addCurve(to: CGPoint(x: 0, y: 15.75), controlPoint1: CGPoint(x: 6, y: 11.25), controlPoint2: CGPoint(x: 0, y: 12.76))
            shape.addLine(to: CGPoint(x: 0, y: 18))
            shape.addLine(to: CGPoint(x: 18, y: 18))
            shape.addLine(to: CGPoint(x: 18, y: 15.75))
            shape.addCurve(to: CGPoint(x: 9, y: 11.25), controlPoint1: CGPoint(x: 18, y: 12.76), controlPoint2: CGPoint(x: 12, y: 11.25))
            shape.close()
            context.saveGState()
            context.translateBy(x: 4, y: 4)
            UIColor(hue: 0.667, saturation: 0.081, brightness: 0.58, alpha: 1).setFill()
            shape.fill()
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    
    //MARK: - Canvas Images
    
    /// Page 1
    
    class func imageOfBoardCategory() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 12, height: 10), false, 0)
        StyleKit.drawBoardCategory()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfRefresh() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 20, height: 24), false, 0)
        StyleKit.drawRefresh()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfSearch() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 23, height: 23), false, 0)
        StyleKit.drawSearch()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfCompose() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 21, height: 21), false, 0)
        StyleKit.drawCompose()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfMoreH() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 27, height: 5), false, 0)
        StyleKit.drawMoreH()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfUpvote() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 15, height: 15), false, 0)
        StyleKit.drawUpvote()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfDownvote() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 15, height: 15), false, 0)
        StyleKit.drawDownvote()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfComment() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 17, height: 12), false, 0)
        StyleKit.drawComment()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfAuthor() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 10, height: 11), false, 0)
        StyleKit.drawAuthor()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfClock() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 11, height: 11), false, 0)
        StyleKit.drawClock()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfCategory() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 4, height: 10), false, 0)
        StyleKit.drawCategory()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfMoreV() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 3, height: 14), false, 0)
        StyleKit.drawMoreV()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfFavorite() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 24, height: 20), false, 0)
        StyleKit.drawFavorite()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfFavoriteTabBar() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 24, height: 24), false, 0)
        StyleKit.drawFavoriteTabBar()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfHotTopic() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 24, height: 24), false, 0)
        StyleKit.drawHotTopic()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfProfile() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 26, height: 26), false, 0)
        StyleKit.drawProfile()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    
    //MARK: - Resizing Behavior
    
    enum ResizingBehavior {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.
        
        func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }
            
            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)
            
            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }
            
            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
    
    
}
