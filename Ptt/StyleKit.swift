//
//  StyleKit.swift
//  Ptt
//
//  Created by denkeni on Feb 25, 2020.
//  Copyright Â© 2020 Ptt. All rights reserved.
//
//  Generated by PaintCode Plugin for Sketch
//  http://www.paintcodeapp.com/sketch
//

import UIKit



class StyleKit: NSObject {
    
    
    //MARK: - Canvas Drawings
    
    /// Page 1
    
    class func drawFavorite(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 14, height: 14), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 14, height: 14), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 14, y: resizedFrame.height / 14)
        
        /// Fill 1
        let fill1 = UIBezierPath()
        fill1.move(to: CGPoint(x: 6, y: 10))
        fill1.addLine(to: CGPoint(x: 5.13, y: 9.28))
        fill1.addCurve(to: CGPoint(x: 0, y: 3), controlPoint1: CGPoint(x: 2.04, y: 6.74), controlPoint2: CGPoint(x: 0, y: 5.06))
        fill1.addCurve(to: CGPoint(x: 3.3, y: 0), controlPoint1: CGPoint(x: 0, y: 1.32), controlPoint2: CGPoint(x: 1.45, y: 0))
        fill1.addCurve(to: CGPoint(x: 6, y: 1.14), controlPoint1: CGPoint(x: 4.34, y: 0), controlPoint2: CGPoint(x: 5.35, y: 0.44))
        fill1.addCurve(to: CGPoint(x: 8.7, y: 0), controlPoint1: CGPoint(x: 6.65, y: 0.44), controlPoint2: CGPoint(x: 7.66, y: 0))
        fill1.addCurve(to: CGPoint(x: 12, y: 3), controlPoint1: CGPoint(x: 10.55, y: 0), controlPoint2: CGPoint(x: 12, y: 1.32))
        fill1.addCurve(to: CGPoint(x: 6.87, y: 9.29), controlPoint1: CGPoint(x: 12, y: 5.06), controlPoint2: CGPoint(x: 9.96, y: 6.74))
        fill1.addLine(to: CGPoint(x: 6, y: 10))
        fill1.close()
        context.saveGState()
        context.translateBy(x: 1, y: 2)
        fill1.usesEvenOddFillRule = true
        UIColor(hue: 0.667, saturation: 0.079, brightness: 0.4, alpha: 1).setFill()
        fill1.fill()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    
    //MARK: - Canvas Images
    
    /// Page 1
    
    class func imageOfFavorite() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 14, height: 14), false, 0)
        StyleKit.drawFavorite()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    
    //MARK: - Resizing Behavior
    
    enum ResizingBehavior {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.
        
        func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }
            
            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)
            
            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }
            
            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
    
    
}

extension StyleKit {

    class func imageOfFavorite(with size: CGSize) -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage

        UIGraphicsBeginImageContextWithOptions(size, false, 0)
        StyleKit.drawFavorite(frame: CGRect(origin: CGPoint.zero, size: size), resizing: .aspectFit)
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        LocalCache.image = image
        return image
    }
}
