//
//  StyleKit.swift
//  Ptt
//
//  Created by denkeni on Mar 27, 2020.
//  Copyright Â© 2020 Ptt. All rights reserved.
//
//  Generated by PaintCode Plugin for Sketch
//  http://www.paintcodeapp.com/sketch
//

import UIKit



class StyleKit: NSObject {
    
    
    //MARK: - Canvas Drawings
    
    /// Page 1
    
    class func drawAuthor(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 10, height: 11), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 10, height: 11), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 10, y: resizedFrame.height / 11)
        
        /// component-10-5
        do {
            context.saveGState()
            
            /// Group 3
            do {
                context.saveGState()
                context.translateBy(x: 0, y: 3)
                
                /// Fill 1
                let fill1 = UIBezierPath()
                fill1.move(to: CGPoint(x: 4.47, y: 6.07))
                fill1.addCurve(to: CGPoint(x: 0, y: 4.5), controlPoint1: CGPoint(x: 2, y: 6.07), controlPoint2: CGPoint(x: 0, y: 5.37))
                fill1.addCurve(to: CGPoint(x: 4.47, y: 0), controlPoint1: CGPoint(x: 0, y: 2.02), controlPoint2: CGPoint(x: 2, y: 0))
                fill1.addCurve(to: CGPoint(x: 8.94, y: 4.5), controlPoint1: CGPoint(x: 6.93, y: 0), controlPoint2: CGPoint(x: 8.94, y: 2.02))
                fill1.addCurve(to: CGPoint(x: 4.47, y: 6.07), controlPoint1: CGPoint(x: 8.94, y: 5.37), controlPoint2: CGPoint(x: 6.93, y: 6.07))
                fill1.close()
                context.saveGState()
                context.translateBy(x: 0.5, y: 1.43)
                fill1.usesEvenOddFillRule = true
                UIColor(white: 0.09, alpha: 1).setFill()
                fill1.fill()
                context.restoreGState()
                
                /// Fill 2
                let fill2 = UIBezierPath()
                fill2.move(to: CGPoint(x: 4.97, y: 1))
                fill2.addCurve(to: CGPoint(x: 1, y: 5), controlPoint1: CGPoint(x: 2.78, y: 1), controlPoint2: CGPoint(x: 1, y: 2.79))
                fill2.addCurve(to: CGPoint(x: 1.9, y: 5.62), controlPoint1: CGPoint(x: 1, y: 5.11), controlPoint2: CGPoint(x: 1.24, y: 5.37))
                fill2.addCurve(to: CGPoint(x: 4.97, y: 6.07), controlPoint1: CGPoint(x: 2.68, y: 5.91), controlPoint2: CGPoint(x: 3.8, y: 6.07))
                fill2.addCurve(to: CGPoint(x: 8.04, y: 5.62), controlPoint1: CGPoint(x: 6.14, y: 6.07), controlPoint2: CGPoint(x: 7.25, y: 5.91))
                fill2.addCurve(to: CGPoint(x: 8.94, y: 5), controlPoint1: CGPoint(x: 8.69, y: 5.37), controlPoint2: CGPoint(x: 8.94, y: 5.11))
                fill2.addCurve(to: CGPoint(x: 4.97, y: 1), controlPoint1: CGPoint(x: 8.94, y: 2.79), controlPoint2: CGPoint(x: 7.16, y: 1))
                fill2.addLine(to: CGPoint(x: 4.97, y: 1))
                fill2.close()
                fill2.move(to: CGPoint(x: 4.97, y: 0))
                fill2.addCurve(to: CGPoint(x: 9.94, y: 5), controlPoint1: CGPoint(x: 7.71, y: 0), controlPoint2: CGPoint(x: 9.94, y: 2.24))
                fill2.addCurve(to: CGPoint(x: 4.97, y: 7.07), controlPoint1: CGPoint(x: 9.94, y: 6.38), controlPoint2: CGPoint(x: 7.45, y: 7.07))
                fill2.addCurve(to: CGPoint(x: 0, y: 5), controlPoint1: CGPoint(x: 2.48, y: 7.07), controlPoint2: CGPoint(x: 0, y: 6.38))
                fill2.addCurve(to: CGPoint(x: 4.97, y: 0), controlPoint1: CGPoint(x: 0, y: 2.24), controlPoint2: CGPoint(x: 2.22, y: 0))
                fill2.close()
                context.saveGState()
                context.translateBy(x: 0, y: 0.93)
                fill2.usesEvenOddFillRule = true
                UIColor(hue: 0.667, saturation: 0.081, brightness: 0.58, alpha: 1).setFill()
                fill2.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// Fill 4
            let fill4 = UIBezierPath()
            fill4.move(to: CGPoint(x: 2.47, y: 0))
            fill4.addCurve(to: CGPoint(x: 3.41, y: 0.19), controlPoint1: CGPoint(x: 2.8, y: 0), controlPoint2: CGPoint(x: 3.11, y: 0.06))
            fill4.addCurve(to: CGPoint(x: 4.21, y: 0.73), controlPoint1: CGPoint(x: 3.71, y: 0.32), controlPoint2: CGPoint(x: 3.98, y: 0.5))
            fill4.addCurve(to: CGPoint(x: 4.75, y: 1.54), controlPoint1: CGPoint(x: 4.44, y: 0.97), controlPoint2: CGPoint(x: 4.62, y: 1.24))
            fill4.addCurve(to: CGPoint(x: 4.94, y: 2.5), controlPoint1: CGPoint(x: 4.87, y: 1.85), controlPoint2: CGPoint(x: 4.94, y: 2.17))
            fill4.addCurve(to: CGPoint(x: 4.75, y: 3.46), controlPoint1: CGPoint(x: 4.94, y: 2.83), controlPoint2: CGPoint(x: 4.87, y: 3.15))
            fill4.addCurve(to: CGPoint(x: 4.21, y: 4.27), controlPoint1: CGPoint(x: 4.62, y: 3.76), controlPoint2: CGPoint(x: 4.44, y: 4.03))
            fill4.addCurve(to: CGPoint(x: 3.41, y: 4.81), controlPoint1: CGPoint(x: 3.98, y: 4.5), controlPoint2: CGPoint(x: 3.71, y: 4.68))
            fill4.addCurve(to: CGPoint(x: 2.47, y: 5), controlPoint1: CGPoint(x: 3.11, y: 4.94), controlPoint2: CGPoint(x: 2.8, y: 5))
            fill4.addCurve(to: CGPoint(x: 1.52, y: 4.81), controlPoint1: CGPoint(x: 2.14, y: 5), controlPoint2: CGPoint(x: 1.83, y: 4.94))
            fill4.addCurve(to: CGPoint(x: 0.72, y: 4.27), controlPoint1: CGPoint(x: 1.22, y: 4.68), controlPoint2: CGPoint(x: 0.95, y: 4.5))
            fill4.addCurve(to: CGPoint(x: 0.19, y: 3.46), controlPoint1: CGPoint(x: 0.49, y: 4.03), controlPoint2: CGPoint(x: 0.31, y: 3.76))
            fill4.addCurve(to: CGPoint(x: 0, y: 2.5), controlPoint1: CGPoint(x: 0.06, y: 3.15), controlPoint2: CGPoint(x: 0, y: 2.83))
            fill4.addCurve(to: CGPoint(x: 0.19, y: 1.54), controlPoint1: CGPoint(x: 0, y: 2.17), controlPoint2: CGPoint(x: 0.06, y: 1.85))
            fill4.addCurve(to: CGPoint(x: 0.72, y: 0.73), controlPoint1: CGPoint(x: 0.31, y: 1.24), controlPoint2: CGPoint(x: 0.49, y: 0.97))
            fill4.addCurve(to: CGPoint(x: 1.52, y: 0.19), controlPoint1: CGPoint(x: 0.95, y: 0.5), controlPoint2: CGPoint(x: 1.22, y: 0.32))
            fill4.addCurve(to: CGPoint(x: 2.47, y: 0), controlPoint1: CGPoint(x: 1.83, y: 0.06), controlPoint2: CGPoint(x: 2.14, y: 0))
            fill4.close()
            context.saveGState()
            context.translateBy(x: 2.5, y: 0.5)
            fill4.usesEvenOddFillRule = true
            UIColor(white: 0.09, alpha: 1).setFill()
            fill4.fill()
            context.restoreGState()
            
            /// Group 7
            do {
                context.saveGState()
                context.translateBy(x: 2, y: 0)
                
                /// Clip 6
                let clip6 = UIBezierPath()
                clip6.move(to: CGPoint(x: 0, y: 3))
                clip6.addCurve(to: CGPoint(x: 0.87, y: 0.88), controlPoint1: CGPoint(x: 0, y: 2.17), controlPoint2: CGPoint(x: 0.29, y: 1.46))
                clip6.addCurve(to: CGPoint(x: 2.97, y: 0), controlPoint1: CGPoint(x: 1.45, y: 0.29), controlPoint2: CGPoint(x: 2.15, y: 0))
                clip6.addCurve(to: CGPoint(x: 5.07, y: 0.88), controlPoint1: CGPoint(x: 3.79, y: 0), controlPoint2: CGPoint(x: 4.49, y: 0.29))
                clip6.addCurve(to: CGPoint(x: 5.94, y: 3), controlPoint1: CGPoint(x: 5.65, y: 1.46), controlPoint2: CGPoint(x: 5.94, y: 2.17))
                clip6.addCurve(to: CGPoint(x: 5.07, y: 5.12), controlPoint1: CGPoint(x: 5.94, y: 3.83), controlPoint2: CGPoint(x: 5.65, y: 4.54))
                clip6.addCurve(to: CGPoint(x: 2.97, y: 6), controlPoint1: CGPoint(x: 4.49, y: 5.71), controlPoint2: CGPoint(x: 3.79, y: 6))
                clip6.addCurve(to: CGPoint(x: 0.87, y: 5.12), controlPoint1: CGPoint(x: 2.15, y: 6), controlPoint2: CGPoint(x: 1.45, y: 5.71))
                clip6.addCurve(to: CGPoint(x: 0, y: 3), controlPoint1: CGPoint(x: 0.29, y: 4.54), controlPoint2: CGPoint(x: 0, y: 3.83))
                clip6.close()
                
                /// Clip 6 (Outline Mask)
                context.saveGState()
                clip6.addClip()
                
                /// Stroke 5
                let stroke5 = UIBezierPath()
                stroke5.move(to: CGPoint(x: 2.97, y: 0))
                stroke5.addCurve(to: CGPoint(x: 4.1, y: 0.23), controlPoint1: CGPoint(x: 3.36, y: 0), controlPoint2: CGPoint(x: 3.74, y: 0.08))
                stroke5.addCurve(to: CGPoint(x: 5.07, y: 0.88), controlPoint1: CGPoint(x: 4.47, y: 0.38), controlPoint2: CGPoint(x: 4.79, y: 0.6))
                stroke5.addCurve(to: CGPoint(x: 5.71, y: 1.85), controlPoint1: CGPoint(x: 5.34, y: 1.16), controlPoint2: CGPoint(x: 5.56, y: 1.48))
                stroke5.addCurve(to: CGPoint(x: 5.94, y: 3), controlPoint1: CGPoint(x: 5.86, y: 2.22), controlPoint2: CGPoint(x: 5.94, y: 2.6))
                stroke5.addCurve(to: CGPoint(x: 5.71, y: 4.15), controlPoint1: CGPoint(x: 5.94, y: 3.4), controlPoint2: CGPoint(x: 5.86, y: 3.78))
                stroke5.addCurve(to: CGPoint(x: 5.07, y: 5.12), controlPoint1: CGPoint(x: 5.56, y: 4.52), controlPoint2: CGPoint(x: 5.34, y: 4.84))
                stroke5.addCurve(to: CGPoint(x: 4.1, y: 5.77), controlPoint1: CGPoint(x: 4.79, y: 5.4), controlPoint2: CGPoint(x: 4.47, y: 5.62))
                stroke5.addCurve(to: CGPoint(x: 2.97, y: 6), controlPoint1: CGPoint(x: 3.74, y: 5.92), controlPoint2: CGPoint(x: 3.36, y: 6))
                stroke5.addCurve(to: CGPoint(x: 1.83, y: 5.77), controlPoint1: CGPoint(x: 2.57, y: 6), controlPoint2: CGPoint(x: 2.2, y: 5.92))
                stroke5.addCurve(to: CGPoint(x: 0.87, y: 5.12), controlPoint1: CGPoint(x: 1.47, y: 5.62), controlPoint2: CGPoint(x: 1.15, y: 5.4))
                stroke5.addCurve(to: CGPoint(x: 0.23, y: 4.15), controlPoint1: CGPoint(x: 0.59, y: 4.84), controlPoint2: CGPoint(x: 0.38, y: 4.52))
                stroke5.addCurve(to: CGPoint(x: 0, y: 3), controlPoint1: CGPoint(x: 0.08, y: 3.78), controlPoint2: CGPoint(x: 0, y: 3.4))
                stroke5.addCurve(to: CGPoint(x: 0.23, y: 1.85), controlPoint1: CGPoint(x: 0, y: 2.6), controlPoint2: CGPoint(x: 0.08, y: 2.22))
                stroke5.addCurve(to: CGPoint(x: 0.87, y: 0.88), controlPoint1: CGPoint(x: 0.38, y: 1.48), controlPoint2: CGPoint(x: 0.59, y: 1.16))
                stroke5.addCurve(to: CGPoint(x: 1.83, y: 0.23), controlPoint1: CGPoint(x: 1.15, y: 0.6), controlPoint2: CGPoint(x: 1.47, y: 0.38))
                stroke5.addCurve(to: CGPoint(x: 2.97, y: 0), controlPoint1: CGPoint(x: 2.2, y: 0.08), controlPoint2: CGPoint(x: 2.57, y: 0))
                stroke5.close()
                context.saveGState()
                stroke5.lineWidth = 2
                UIColor(hue: 0.667, saturation: 0.081, brightness: 0.58, alpha: 1).setStroke()
                stroke5.stroke()
                context.restoreGState()
                
                context.restoreGState()
                // End Clip 6 (Outline Mask)
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawClock(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 11, height: 11), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 11, height: 11), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 11, y: resizedFrame.height / 11)
        
        /// component-11-7
        do {
            context.saveGState()
            
            /// Group 3
            do {
                context.saveGState()
                
                /// Fill 1
                let fill1 = UIBezierPath()
                fill1.move(to: CGPoint(x: 5, y: 10))
                fill1.addCurve(to: CGPoint(x: 0, y: 5), controlPoint1: CGPoint(x: 2.24, y: 10), controlPoint2: CGPoint(x: 0, y: 7.76))
                fill1.addCurve(to: CGPoint(x: 5, y: 0), controlPoint1: CGPoint(x: 0, y: 2.24), controlPoint2: CGPoint(x: 2.24, y: 0))
                fill1.addCurve(to: CGPoint(x: 10, y: 5), controlPoint1: CGPoint(x: 7.76, y: 0), controlPoint2: CGPoint(x: 10, y: 2.24))
                fill1.addCurve(to: CGPoint(x: 5, y: 10), controlPoint1: CGPoint(x: 10, y: 7.76), controlPoint2: CGPoint(x: 7.76, y: 10))
                fill1.close()
                context.saveGState()
                context.translateBy(x: 0.5, y: 0.5)
                fill1.usesEvenOddFillRule = true
                UIColor(white: 0.09, alpha: 1).setFill()
                fill1.fill()
                context.restoreGState()
                
                /// Fill 2
                let fill2 = UIBezierPath()
                fill2.move(to: CGPoint(x: 5.5, y: 1))
                fill2.addCurve(to: CGPoint(x: 1, y: 5.5), controlPoint1: CGPoint(x: 3.02, y: 1), controlPoint2: CGPoint(x: 1, y: 3.02))
                fill2.addCurve(to: CGPoint(x: 5.5, y: 10), controlPoint1: CGPoint(x: 1, y: 7.98), controlPoint2: CGPoint(x: 3.02, y: 10))
                fill2.addCurve(to: CGPoint(x: 10, y: 5.5), controlPoint1: CGPoint(x: 7.98, y: 10), controlPoint2: CGPoint(x: 10, y: 7.98))
                fill2.addCurve(to: CGPoint(x: 5.5, y: 1), controlPoint1: CGPoint(x: 10, y: 3.02), controlPoint2: CGPoint(x: 7.98, y: 1))
                fill2.addLine(to: CGPoint(x: 5.5, y: 1))
                fill2.close()
                fill2.move(to: CGPoint(x: 5.5, y: 0))
                fill2.addCurve(to: CGPoint(x: 11, y: 5.5), controlPoint1: CGPoint(x: 8.54, y: 0), controlPoint2: CGPoint(x: 11, y: 2.46))
                fill2.addCurve(to: CGPoint(x: 5.5, y: 11), controlPoint1: CGPoint(x: 11, y: 8.54), controlPoint2: CGPoint(x: 8.54, y: 11))
                fill2.addCurve(to: CGPoint(x: 0, y: 5.5), controlPoint1: CGPoint(x: 2.46, y: 11), controlPoint2: CGPoint(x: 0, y: 8.54))
                fill2.addCurve(to: CGPoint(x: 5.5, y: 0), controlPoint1: CGPoint(x: 0, y: 2.46), controlPoint2: CGPoint(x: 2.46, y: 0))
                fill2.close()
                context.saveGState()
                fill2.usesEvenOddFillRule = true
                UIColor(hue: 0.667, saturation: 0.081, brightness: 0.58, alpha: 1).setFill()
                fill2.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// Stroke 4
            let stroke4 = UIBezierPath()
            stroke4.move(to: CGPoint.zero)
            stroke4.addLine(to: CGPoint(x: 0, y: 3))
            stroke4.addLine(to: CGPoint(x: 2.06, y: 3))
            context.saveGState()
            context.translateBy(x: 5.5, y: 2.2)
            stroke4.lineJoinStyle = .round
            stroke4.lineCapStyle = .round
            stroke4.lineWidth = 1
            UIColor(hue: 0.667, saturation: 0.081, brightness: 0.58, alpha: 1).setStroke()
            stroke4.stroke()
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawCategory(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 4, height: 10), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 4, height: 10), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 4, y: resizedFrame.height / 10)
        
        /// Stroke 1
        let stroke1 = UIBezierPath()
        stroke1.move(to: CGPoint.zero)
        stroke1.addLine(to: CGPoint(x: 4, y: 0))
        stroke1.addLine(to: CGPoint(x: 4, y: 10))
        stroke1.addLine(to: CGPoint(x: 0, y: 10))
        stroke1.addLine(to: CGPoint.zero)
        stroke1.close()
        context.saveGState()
        stroke1.lineJoinStyle = .round
        stroke1.lineCapStyle = .round
        stroke1.lineWidth = 1
        UIColor(hue: 0.667, saturation: 0.081, brightness: 0.58, alpha: 1).setStroke()
        stroke1.stroke()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawMore(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 3, height: 14), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 3, height: 14), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 3, y: resizedFrame.height / 14)
        
        /// More
        do {
            context.saveGState()
            
            /// Fill 1
            let fill1 = UIBezierPath()
            fill1.move(to: CGPoint(x: 3, y: 1.5))
            fill1.addCurve(to: CGPoint(x: 2.89, y: 2.07), controlPoint1: CGPoint(x: 3, y: 1.7), controlPoint2: CGPoint(x: 2.96, y: 1.89))
            fill1.addCurve(to: CGPoint(x: 2.56, y: 2.56), controlPoint1: CGPoint(x: 2.81, y: 2.26), controlPoint2: CGPoint(x: 2.7, y: 2.42))
            fill1.addCurve(to: CGPoint(x: 2.07, y: 2.89), controlPoint1: CGPoint(x: 2.42, y: 2.7), controlPoint2: CGPoint(x: 2.26, y: 2.81))
            fill1.addCurve(to: CGPoint(x: 1.5, y: 3), controlPoint1: CGPoint(x: 1.89, y: 2.96), controlPoint2: CGPoint(x: 1.7, y: 3))
            fill1.addCurve(to: CGPoint(x: 0.93, y: 2.89), controlPoint1: CGPoint(x: 1.3, y: 3), controlPoint2: CGPoint(x: 1.11, y: 2.96))
            fill1.addCurve(to: CGPoint(x: 0.44, y: 2.56), controlPoint1: CGPoint(x: 0.74, y: 2.81), controlPoint2: CGPoint(x: 0.58, y: 2.7))
            fill1.addCurve(to: CGPoint(x: 0.11, y: 2.07), controlPoint1: CGPoint(x: 0.3, y: 2.42), controlPoint2: CGPoint(x: 0.19, y: 2.26))
            fill1.addCurve(to: CGPoint(x: 0, y: 1.5), controlPoint1: CGPoint(x: 0.04, y: 1.89), controlPoint2: CGPoint(x: 0, y: 1.7))
            fill1.addCurve(to: CGPoint(x: 0.11, y: 0.93), controlPoint1: CGPoint(x: 0, y: 1.3), controlPoint2: CGPoint(x: 0.04, y: 1.11))
            fill1.addCurve(to: CGPoint(x: 0.44, y: 0.44), controlPoint1: CGPoint(x: 0.19, y: 0.74), controlPoint2: CGPoint(x: 0.3, y: 0.58))
            fill1.addCurve(to: CGPoint(x: 0.93, y: 0.11), controlPoint1: CGPoint(x: 0.58, y: 0.3), controlPoint2: CGPoint(x: 0.74, y: 0.19))
            fill1.addCurve(to: CGPoint(x: 1.5, y: 0), controlPoint1: CGPoint(x: 1.11, y: 0.04), controlPoint2: CGPoint(x: 1.3, y: 0))
            fill1.addCurve(to: CGPoint(x: 2.07, y: 0.11), controlPoint1: CGPoint(x: 1.7, y: 0), controlPoint2: CGPoint(x: 1.89, y: 0.04))
            fill1.addCurve(to: CGPoint(x: 2.56, y: 0.44), controlPoint1: CGPoint(x: 2.26, y: 0.19), controlPoint2: CGPoint(x: 2.42, y: 0.3))
            fill1.addCurve(to: CGPoint(x: 2.89, y: 0.93), controlPoint1: CGPoint(x: 2.7, y: 0.58), controlPoint2: CGPoint(x: 2.81, y: 0.74))
            fill1.addCurve(to: CGPoint(x: 3, y: 1.5), controlPoint1: CGPoint(x: 2.96, y: 1.11), controlPoint2: CGPoint(x: 3, y: 1.3))
            fill1.close()
            context.saveGState()
            fill1.usesEvenOddFillRule = true
            UIColor(hue: 0.667, saturation: 0.081, brightness: 0.58, alpha: 1).setFill()
            fill1.fill()
            context.restoreGState()
            
            /// Fill 2
            let fill2 = UIBezierPath()
            fill2.move(to: CGPoint(x: 3, y: 1.5))
            fill2.addCurve(to: CGPoint(x: 2.89, y: 2.07), controlPoint1: CGPoint(x: 3, y: 1.7), controlPoint2: CGPoint(x: 2.96, y: 1.89))
            fill2.addCurve(to: CGPoint(x: 2.56, y: 2.56), controlPoint1: CGPoint(x: 2.81, y: 2.26), controlPoint2: CGPoint(x: 2.7, y: 2.42))
            fill2.addCurve(to: CGPoint(x: 2.07, y: 2.89), controlPoint1: CGPoint(x: 2.42, y: 2.7), controlPoint2: CGPoint(x: 2.26, y: 2.81))
            fill2.addCurve(to: CGPoint(x: 1.5, y: 3), controlPoint1: CGPoint(x: 1.89, y: 2.96), controlPoint2: CGPoint(x: 1.7, y: 3))
            fill2.addCurve(to: CGPoint(x: 0.93, y: 2.89), controlPoint1: CGPoint(x: 1.3, y: 3), controlPoint2: CGPoint(x: 1.11, y: 2.96))
            fill2.addCurve(to: CGPoint(x: 0.44, y: 2.56), controlPoint1: CGPoint(x: 0.74, y: 2.81), controlPoint2: CGPoint(x: 0.58, y: 2.7))
            fill2.addCurve(to: CGPoint(x: 0.11, y: 2.07), controlPoint1: CGPoint(x: 0.3, y: 2.42), controlPoint2: CGPoint(x: 0.19, y: 2.26))
            fill2.addCurve(to: CGPoint(x: 0, y: 1.5), controlPoint1: CGPoint(x: 0.04, y: 1.89), controlPoint2: CGPoint(x: 0, y: 1.7))
            fill2.addCurve(to: CGPoint(x: 0.11, y: 0.93), controlPoint1: CGPoint(x: 0, y: 1.3), controlPoint2: CGPoint(x: 0.04, y: 1.11))
            fill2.addCurve(to: CGPoint(x: 0.44, y: 0.44), controlPoint1: CGPoint(x: 0.19, y: 0.74), controlPoint2: CGPoint(x: 0.3, y: 0.58))
            fill2.addCurve(to: CGPoint(x: 0.93, y: 0.11), controlPoint1: CGPoint(x: 0.58, y: 0.3), controlPoint2: CGPoint(x: 0.74, y: 0.19))
            fill2.addCurve(to: CGPoint(x: 1.5, y: 0), controlPoint1: CGPoint(x: 1.11, y: 0.04), controlPoint2: CGPoint(x: 1.3, y: 0))
            fill2.addCurve(to: CGPoint(x: 2.07, y: 0.11), controlPoint1: CGPoint(x: 1.7, y: 0), controlPoint2: CGPoint(x: 1.89, y: 0.04))
            fill2.addCurve(to: CGPoint(x: 2.56, y: 0.44), controlPoint1: CGPoint(x: 2.26, y: 0.19), controlPoint2: CGPoint(x: 2.42, y: 0.3))
            fill2.addCurve(to: CGPoint(x: 2.89, y: 0.93), controlPoint1: CGPoint(x: 2.7, y: 0.58), controlPoint2: CGPoint(x: 2.81, y: 0.74))
            fill2.addCurve(to: CGPoint(x: 3, y: 1.5), controlPoint1: CGPoint(x: 2.96, y: 1.11), controlPoint2: CGPoint(x: 3, y: 1.3))
            fill2.close()
            context.saveGState()
            context.translateBy(x: 0, y: 6)
            fill2.usesEvenOddFillRule = true
            UIColor(hue: 0.667, saturation: 0.081, brightness: 0.58, alpha: 1).setFill()
            fill2.fill()
            context.restoreGState()
            
            /// Fill 3
            let fill3 = UIBezierPath()
            fill3.move(to: CGPoint(x: 3, y: 1.5))
            fill3.addCurve(to: CGPoint(x: 2.89, y: 2.07), controlPoint1: CGPoint(x: 3, y: 1.7), controlPoint2: CGPoint(x: 2.96, y: 1.89))
            fill3.addCurve(to: CGPoint(x: 2.56, y: 2.56), controlPoint1: CGPoint(x: 2.81, y: 2.26), controlPoint2: CGPoint(x: 2.7, y: 2.42))
            fill3.addCurve(to: CGPoint(x: 2.07, y: 2.89), controlPoint1: CGPoint(x: 2.42, y: 2.7), controlPoint2: CGPoint(x: 2.26, y: 2.81))
            fill3.addCurve(to: CGPoint(x: 1.5, y: 3), controlPoint1: CGPoint(x: 1.89, y: 2.96), controlPoint2: CGPoint(x: 1.7, y: 3))
            fill3.addCurve(to: CGPoint(x: 0.93, y: 2.89), controlPoint1: CGPoint(x: 1.3, y: 3), controlPoint2: CGPoint(x: 1.11, y: 2.96))
            fill3.addCurve(to: CGPoint(x: 0.44, y: 2.56), controlPoint1: CGPoint(x: 0.74, y: 2.81), controlPoint2: CGPoint(x: 0.58, y: 2.7))
            fill3.addCurve(to: CGPoint(x: 0.11, y: 2.07), controlPoint1: CGPoint(x: 0.3, y: 2.42), controlPoint2: CGPoint(x: 0.19, y: 2.26))
            fill3.addCurve(to: CGPoint(x: 0, y: 1.5), controlPoint1: CGPoint(x: 0.04, y: 1.89), controlPoint2: CGPoint(x: 0, y: 1.7))
            fill3.addCurve(to: CGPoint(x: 0.11, y: 0.93), controlPoint1: CGPoint(x: 0, y: 1.3), controlPoint2: CGPoint(x: 0.04, y: 1.11))
            fill3.addCurve(to: CGPoint(x: 0.44, y: 0.44), controlPoint1: CGPoint(x: 0.19, y: 0.74), controlPoint2: CGPoint(x: 0.3, y: 0.58))
            fill3.addCurve(to: CGPoint(x: 0.93, y: 0.11), controlPoint1: CGPoint(x: 0.58, y: 0.3), controlPoint2: CGPoint(x: 0.74, y: 0.19))
            fill3.addCurve(to: CGPoint(x: 1.5, y: 0), controlPoint1: CGPoint(x: 1.11, y: 0.04), controlPoint2: CGPoint(x: 1.3, y: 0))
            fill3.addCurve(to: CGPoint(x: 2.07, y: 0.11), controlPoint1: CGPoint(x: 1.7, y: 0), controlPoint2: CGPoint(x: 1.89, y: 0.04))
            fill3.addCurve(to: CGPoint(x: 2.56, y: 0.44), controlPoint1: CGPoint(x: 2.26, y: 0.19), controlPoint2: CGPoint(x: 2.42, y: 0.3))
            fill3.addCurve(to: CGPoint(x: 2.89, y: 0.93), controlPoint1: CGPoint(x: 2.7, y: 0.58), controlPoint2: CGPoint(x: 2.81, y: 0.74))
            fill3.addCurve(to: CGPoint(x: 3, y: 1.5), controlPoint1: CGPoint(x: 2.96, y: 1.11), controlPoint2: CGPoint(x: 3, y: 1.3))
            fill3.close()
            context.saveGState()
            context.translateBy(x: 0, y: 11)
            fill3.usesEvenOddFillRule = true
            UIColor(hue: 0.667, saturation: 0.081, brightness: 0.58, alpha: 1).setFill()
            fill3.fill()
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawFavorite(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 24, height: 20), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 24, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 24, y: resizedFrame.height / 20)
        
        /// Fill 1
        let fill1 = UIBezierPath()
        fill1.move(to: CGPoint(x: 12, y: 20))
        fill1.addLine(to: CGPoint(x: 10.26, y: 18.56))
        fill1.addCurve(to: CGPoint(x: 0, y: 5.99), controlPoint1: CGPoint(x: 4.08, y: 13.47), controlPoint2: CGPoint(x: 0, y: 10.11))
        fill1.addCurve(to: CGPoint(x: 6.6, y: 0), controlPoint1: CGPoint(x: 0, y: 2.64), controlPoint2: CGPoint(x: 2.9, y: 0))
        fill1.addCurve(to: CGPoint(x: 12, y: 2.28), controlPoint1: CGPoint(x: 8.69, y: 0), controlPoint2: CGPoint(x: 10.69, y: 0.88))
        fill1.addCurve(to: CGPoint(x: 17.4, y: 0), controlPoint1: CGPoint(x: 13.31, y: 0.88), controlPoint2: CGPoint(x: 15.31, y: 0))
        fill1.addCurve(to: CGPoint(x: 24, y: 5.99), controlPoint1: CGPoint(x: 21.1, y: 0), controlPoint2: CGPoint(x: 24, y: 2.64))
        fill1.addCurve(to: CGPoint(x: 13.74, y: 18.57), controlPoint1: CGPoint(x: 24, y: 10.11), controlPoint2: CGPoint(x: 19.92, y: 13.47))
        fill1.addLine(to: CGPoint(x: 12, y: 20))
        fill1.close()
        context.saveGState()
        fill1.usesEvenOddFillRule = true
        UIColor(hue: 0.667, saturation: 0.079, brightness: 0.4, alpha: 1).setFill()
        fill1.fill()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    
    //MARK: - Canvas Images
    
    /// Page 1
    
    class func imageOfAuthor() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 10, height: 11), false, 0)
        StyleKit.drawAuthor()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfClock() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 11, height: 11), false, 0)
        StyleKit.drawClock()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfCategory() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 4, height: 10), false, 0)
        StyleKit.drawCategory()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfMore() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 3, height: 14), false, 0)
        StyleKit.drawMore()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfFavorite() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 24, height: 20), false, 0)
        StyleKit.drawFavorite()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    
    //MARK: - Resizing Behavior
    
    enum ResizingBehavior {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.
        
        func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }
            
            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)
            
            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }
            
            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
    
    
}
